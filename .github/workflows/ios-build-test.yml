name: iOS Build and Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'iOS/**'
      - 'SwiftUI/**'
      - '.github/workflows/ios-build-test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'iOS/**'
      - 'SwiftUI/**'
      - '.github/workflows/ios-build-test.yml'

env:
  # Environment variables
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  IOS_SIMULATOR_DEVICE: iPhone 15 Pro
  IOS_SIMULATOR_VERSION: 17.5

jobs:
  build-and-test:
    name: Build and Test iOS App
    runs-on: macos-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Show Xcode Version
      run: xcodebuild -version
      
    - name: Show Available Simulators
      run: xcrun simctl list devices available
      
    - name: Cache Derived Data
      uses: actions/cache@v3
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-${{ hashFiles('**/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-
          
    - name: Install iOS Simulator
      run: |
        # Install iOS 17.5 simulator if not available
        xcrun simctl create "Test iPhone" com.apple.CoreSimulator.SimDeviceType.iPhone-15-Pro com.apple.CoreSimulator.SimRuntime.iOS-17-5 || true
        
    - name: Build iOS App
      run: |
        cd iOS
        xcodebuild \
          -project CentralMosqueRochdale.xcodeproj \
          -scheme CentralMosqueRochdale \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5' \
          -configuration Debug \
          -derivedDataPath DerivedData \
          clean build \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty && exit ${PIPESTATUS[0]}
          
    - name: Run Unit Tests
      run: |
        cd iOS
        xcodebuild \
          -project CentralMosqueRochdale.xcodeproj \
          -scheme CentralMosqueRochdale \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5' \
          -configuration Debug \
          -derivedDataPath DerivedData \
          test \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty && exit ${PIPESTATUS[0]} || echo "No tests found or tests failed"
          
    - name: Archive Build Logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: |
          iOS/DerivedData/Logs/
          ~/Library/Developer/Xcode/DerivedData/*/Logs/
        retention-days: 5
        
    - name: Lint Swift Code
      run: |
        # Install SwiftLint if available
        if command -v swiftlint &> /dev/null; then
          cd iOS
          swiftlint --strict
        else
          echo "SwiftLint not installed - skipping linting"
        fi
      continue-on-error: true
      
    - name: Check Code Formatting
      run: |
        # Install swift-format if available  
        if command -v swift-format &> /dev/null; then
          cd iOS
          find . -name "*.swift" -exec swift-format format --in-place {} \;
          # Check if any files were changed
          if [[ -n $(git diff --name-only) ]]; then
            echo "Code formatting issues found:"
            git diff
            exit 1
          else
            echo "Code formatting is correct"
          fi
        else
          echo "swift-format not installed - skipping formatting check"
        fi
      continue-on-error: true

  build-release:
    name: Build Release Configuration
    runs-on: macos-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Derived Data
      uses: actions/cache@v3
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-release-${{ hashFiles('**/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-release-
          ${{ runner.os }}-derived-data-
          
    - name: Build Release Configuration
      run: |
        cd iOS
        xcodebuild \
          -project CentralMosqueRochdale.xcodeproj \
          -scheme CentralMosqueRochdale \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5' \
          -configuration Release \
          -derivedDataPath DerivedData \
          clean build \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty && exit ${PIPESTATUS[0]}
          
    - name: Archive App for Distribution
      run: |
        cd iOS
        xcodebuild \
          -project CentralMosqueRochdale.xcodeproj \
          -scheme CentralMosqueRochdale \
          -configuration Release \
          -derivedDataPath DerivedData \
          -archivePath "CentralMosqueRochdale.xcarchive" \
          archive \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty && exit ${PIPESTATUS[0]} || echo "Archive creation failed - continuing"
      continue-on-error: true
      
    - name: Upload Archive Artifact
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: ios-archive
        path: iOS/CentralMosqueRochdale.xcarchive
        retention-days: 30

  security-scan:
    name: Security and Quality Checks
    runs-on: macos-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Run Security Scan
      run: |
        # Check for hardcoded secrets, API keys, etc.
        echo "Scanning for potential security issues..."
        
        # Check for common security anti-patterns
        if grep -r "http://" iOS/ --include="*.swift" --include="*.plist"; then
          echo "Warning: Found HTTP URLs - consider using HTTPS"
        fi
        
        # Check for hardcoded API keys or secrets
        if grep -r -i "api_key\|secret\|password\|token" iOS/ --include="*.swift" --exclude-dir=DerivedData; then
          echo "Warning: Found potential hardcoded secrets"
        fi
        
        # Check Info.plist for security configurations
        if [ -f "iOS/Info.plist" ]; then
          echo "Checking Info.plist security settings..."
          if ! grep -q "NSAppTransportSecurity" iOS/Info.plist; then
            echo "Warning: App Transport Security not configured"
          fi
        fi
      continue-on-error: true
      
    - name: Check Dependencies
      run: |
        cd iOS
        # List any Swift Package Manager dependencies
        if [ -f "CentralMosqueRochdale.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved" ]; then
          echo "Swift Package Dependencies:"
          cat CentralMosqueRochdale.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
        else
          echo "No Swift Package dependencies found"
        fi
      continue-on-error: true

  notification:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-and-test, build-release, security-scan]
    if: always()
    
    steps:
    - name: Build Status Summary
      run: |
        echo "## iOS Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build and Test | ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Release | ${{ needs.build-release.result }} |" >> $GITHUB_STEP_SUMMARY  
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
          echo "✅ iOS build completed successfully!"
        else
          echo "❌ iOS build failed!"
        fi