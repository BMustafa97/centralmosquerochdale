name: iOS Build and Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'iOS/**'
      - 'SwiftUI/**'
      - '.github/workflows/ios-build-test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'iOS/**'
      - 'SwiftUI/**'
      - '.github/workflows/ios-build-test.yml'

env:
  # Environment variables
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  IOS_SIMULATOR_DEVICE: iPhone 15 Pro
  IOS_SIMULATOR_VERSION: latest

jobs:
  build-and-test:
    name: Build and Test iOS App
    runs-on: macos-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Show Xcode Version
      run: xcodebuild -version
      
    - name: Show Available Simulators
      run: |
        echo "Available iOS Simulators:"
        xcrun simctl list devices available iOS
        echo ""
        echo "Available destinations for scheme:"
        cd iOS
        xcodebuild -project CentralMosqueRochdale.xcodeproj -scheme CentralMosqueRochdale -showdestinations | grep -E "(platform|name|OS)" || true
      
    - name: Cache Derived Data
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-${{ hashFiles('**/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-
          
    - name: Setup iOS Simulator
      run: |
        # List available runtimes and device types
        echo "Available iOS runtimes:"
        xcrun simctl list runtimes | grep iOS || echo "No iOS runtimes found"
        
        echo ""
        echo "Available iPhone device types:"
        xcrun simctl list devicetypes | grep iPhone || echo "No iPhone device types found"
        
        echo ""
        echo "Currently available iPhone simulators:"
        xcrun simctl list devices available | grep iPhone || echo "No iPhone simulators available"
        
        # Try to boot an existing simulator or create one if needed
        EXISTING_SIMULATOR=$(xcrun simctl list devices available | grep iPhone | head -1 | grep -o "([A-Z0-9-]\{36\})" | tr -d "()" || true)
        
        if [ -n "$EXISTING_SIMULATOR" ]; then
          echo "Found existing simulator: $EXISTING_SIMULATOR"
          xcrun simctl boot "$EXISTING_SIMULATOR" 2>/dev/null || echo "Simulator already booted or boot failed"
        else
          echo "No existing simulators found, attempting to create one..."
          # Get the latest iOS runtime
          LATEST_RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | awk '{print $NF}' | tr -d '()')
          if [ -n "$LATEST_RUNTIME" ]; then
            echo "Creating simulator with runtime: $LATEST_RUNTIME"
            xcrun simctl create "GitHub Actions iPhone" com.apple.CoreSimulator.SimDeviceType.iPhone-14 "$LATEST_RUNTIME" || true
          fi
        fi
        
    - name: Build iOS App
      run: |
        cd iOS
        # Use generic iOS Simulator destination
        xcodebuild \
          -project CentralMosqueRochdale.xcodeproj \
          -scheme CentralMosqueRochdale \
          -destination 'generic/platform=iOS Simulator' \
          -configuration Debug \
          -derivedDataPath DerivedData \
          clean build \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty && exit ${PIPESTATUS[0]}
          
    - name: Run Unit Tests
      run: |
        cd iOS
        # Check if scheme has test targets configured by trying to list test destinations
        echo "Checking if test action is configured for scheme..."
        
        # Try to get test destinations - this will fail if no test targets are configured
        TEST_CHECK=$(xcodebuild -project CentralMosqueRochdale.xcodeproj -scheme CentralMosqueRochdale -showdestinations 2>&1 | grep -i "test" || true)
        
        # More reliable check: try to run xcodebuild test with dry-run equivalent
        TEST_ACTION_CHECK=$(xcodebuild -project CentralMosqueRochdale.xcodeproj -scheme CentralMosqueRochdale -destination 'generic/platform=iOS Simulator' -showBuildSettings 2>&1 | grep -i "test.*action" || true)
        
        # Check if the scheme file has test action configured
        SCHEME_FILE="CentralMosqueRochdale.xcodeproj/xcshareddata/xcschemes/CentralMosqueRochdale.xcscheme"
        if [ ! -f "$SCHEME_FILE" ]; then
          SCHEME_FILE="CentralMosqueRochdale.xcodeproj/xcuserdata/*/xcschemes/CentralMosqueRochdale.xcscheme"
        fi
        
        HAS_TEST_ACTION=false
        if ls $SCHEME_FILE 2>/dev/null; then
          if grep -q "TestAction" $SCHEME_FILE 2>/dev/null && grep -q "buildForTesting.*YES" $SCHEME_FILE 2>/dev/null; then
            HAS_TEST_ACTION=true
          fi
        fi
        
        # Final check: try a dry run of the test command
        DIRECT_TEST_CHECK=$(xcodebuild -project CentralMosqueRochdale.xcodeproj -scheme CentralMosqueRochdale -destination 'generic/platform=iOS Simulator' test -dry-run 2>&1 || true)
        
        if echo "$DIRECT_TEST_CHECK" | grep -q "is not currently configured for the test action"; then
          echo "⚠️  Scheme 'CentralMosqueRochdale' is not configured for testing"
          echo ""
          echo "📋 To enable testing, please:"
          echo "1. Open CentralMosqueRochdale.xcodeproj in Xcode"
          echo "2. Go to Product → Scheme → Edit Scheme"
          echo "3. Select 'Test' on the left sidebar"
          echo "4. Click '+' to add test targets"
          echo "5. Create a new test target: File → New → Target → Unit Testing Bundle"
          echo ""
          echo "🔗 More info: https://developer.apple.com/documentation/xctest"
          echo ""
          echo "✅ Skipping test execution - build was successful!"
        else
          echo "✅ Test action is configured, attempting to run tests..."
          
          # Find an available simulator for testing
          AVAILABLE_SIMULATOR=$(xcrun simctl list devices available | grep -E "iPhone.*\([A-Z0-9-]{36}\)" | head -1 | grep -o "([A-Z0-9-]\{36\})" | tr -d "()")
          
          if [ -n "$AVAILABLE_SIMULATOR" ] && [ "$AVAILABLE_SIMULATOR" != "Shutdown" ]; then
            echo "Using simulator ID: $AVAILABLE_SIMULATOR"
            xcodebuild \
              -project CentralMosqueRochdale.xcodeproj \
              -scheme CentralMosqueRochdale \
              -destination "id=$AVAILABLE_SIMULATOR" \
              -configuration Debug \
              -derivedDataPath DerivedData \
              test \
              CODE_SIGNING_ALLOWED=NO \
              | xcpretty && exit ${PIPESTATUS[0]} || echo "Tests failed"
          else
            echo "Using generic iOS Simulator destination for testing"
            xcodebuild \
              -project CentralMosqueRochdale.xcodeproj \
              -scheme CentralMosqueRochdale \
              -destination 'generic/platform=iOS Simulator' \
              -configuration Debug \
              -derivedDataPath DerivedData \
              test \
              CODE_SIGNING_ALLOWED=NO \
              | xcpretty && exit ${PIPESTATUS[0]} || echo "Tests failed"
          fi
        fi
          
    - name: Archive Build Logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          iOS/DerivedData/Logs/
          ~/Library/Developer/Xcode/DerivedData/*/Logs/
        retention-days: 5
        
    - name: Lint Swift Code
      run: |
        # Install SwiftLint if available
        if command -v swiftlint &> /dev/null; then
          cd iOS
          swiftlint --strict
        else
          echo "SwiftLint not installed - skipping linting"
        fi
      continue-on-error: true
      
    - name: Check Code Formatting
      run: |
        # Install swift-format if available  
        if command -v swift-format &> /dev/null; then
          cd iOS
          find . -name "*.swift" -exec swift-format format --in-place {} \;
          # Check if any files were changed
          if [[ -n $(git diff --name-only) ]]; then
            echo "Code formatting issues found:"
            git diff
            exit 1
          else
            echo "Code formatting is correct"
          fi
        else
          echo "swift-format not installed - skipping formatting check"
        fi
      continue-on-error: true

  build-release:
    name: Build Release Configuration
    runs-on: macos-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Cache Derived Data
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-release-${{ hashFiles('**/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-release-
          ${{ runner.os }}-derived-data-
          
    - name: Build Release Configuration
      run: |
        cd iOS
        # Use generic iOS Simulator destination for release build
        xcodebuild \
          -project CentralMosqueRochdale.xcodeproj \
          -scheme CentralMosqueRochdale \
          -destination 'generic/platform=iOS Simulator' \
          -configuration Release \
          -derivedDataPath DerivedData \
          clean build \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty && exit ${PIPESTATUS[0]}
          
    - name: Archive App for Distribution
      run: |
        cd iOS
        xcodebuild \
          -project CentralMosqueRochdale.xcodeproj \
          -scheme CentralMosqueRochdale \
          -configuration Release \
          -derivedDataPath DerivedData \
          -archivePath "CentralMosqueRochdale.xcarchive" \
          archive \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty && exit ${PIPESTATUS[0]} || echo "Archive creation failed - continuing"
      continue-on-error: true
      
    - name: Upload Archive Artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ios-archive
        path: iOS/CentralMosqueRochdale.xcarchive
        retention-days: 30

  security-scan:
    name: Security and Quality Checks
    runs-on: macos-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Run Security Scan
      run: |
        # Check for hardcoded secrets, API keys, etc.
        echo "Scanning for potential security issues..."
        
        # Check for common security anti-patterns
        if grep -r "http://" iOS/ --include="*.swift" --include="*.plist"; then
          echo "Warning: Found HTTP URLs - consider using HTTPS"
        fi
        
        # Check for hardcoded API keys or secrets
        if grep -r -i "api_key\|secret\|password\|token" iOS/ --include="*.swift" --exclude-dir=DerivedData; then
          echo "Warning: Found potential hardcoded secrets"
        fi
        
        # Check Info.plist for security configurations
        if [ -f "iOS/Info.plist" ]; then
          echo "Checking Info.plist security settings..."
          if ! grep -q "NSAppTransportSecurity" iOS/Info.plist; then
            echo "Warning: App Transport Security not configured"
          fi
        fi
      continue-on-error: true
      
    - name: Check Dependencies
      run: |
        cd iOS
        # List any Swift Package Manager dependencies
        if [ -f "CentralMosqueRochdale.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved" ]; then
          echo "Swift Package Dependencies:"
          cat CentralMosqueRochdale.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
        else
          echo "No Swift Package dependencies found"
        fi
      continue-on-error: true

  notification:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-and-test, build-release, security-scan]
    if: always()
    
    steps:
    - name: Build Status Summary
      run: |
        echo "## iOS Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build and Test | ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Release | ${{ needs.build-release.result }} |" >> $GITHUB_STEP_SUMMARY  
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
          echo "✅ iOS build completed successfully!"
        else
          echo "❌ iOS build failed!"
        fi